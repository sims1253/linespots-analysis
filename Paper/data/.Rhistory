ggdag_adjustment_set(full_dag,
exposure = "LS",
outcome = "KN",
shadow = TRUE) +
theme_dag()+
ggtitle("Adjustment Sets für den Effekt von LS auf KN")
# Plotten der möglichen adjustment sets, also der Sets an Variablen die
# man kontrollieren muss um bias zu vermeiden für den effekt von "exposure"
# auf "outcome"
# Man muss alle als "adjusted" markierten Variablen im Modell haben.
ggdag_adjustment_set(full_dag,
exposure = "BK",
outcome = "KN",
shadow = TRUE) +
theme_dag()+
ggtitle("Adjustment Sets für den Effekt von BK auf KN")
# Plotten aller möglichen kausalen Wege von "from" nach "to"
ggdag_paths(full_dag,
from = "BK",
to = "KN",
shadow = TRUE) +
theme_dag()+
ggtitle("Adjustment Sets für den Effekt von BK auf KN")
# Plotten der möglichen adjustment sets, also der Sets an Variablen die
# man kontrollieren muss um bias zu vermeiden für den effekt von "exposure"
# auf "outcome"
# Man muss alle als "adjusted" markierten Variablen im Modell haben.
ggdag_adjustment_set(full_dag,
exposure = "BK",
outcome = "KN",
shadow = TRUE) +
theme_dag()+
ggtitle("Adjustment Sets für den Effekt von BK auf KN")
# Plotten des Dags
ggdag(full_dag, node_size = 23) +
theme_dag()
# Definition des DAGs
full_dag <- dagify(
BK ~ RQCMM,
LS ~ BK,
SYM ~ BK,
FS ~ BK,
KN ~ LS + SYM + FS + BK,
ZG ~ KN
)
# Plotten der möglichen adjustment sets, also der Sets an Variablen die
# man kontrollieren muss um bias zu vermeiden für den effekt von "exposure"
# auf "outcome"
# Man muss alle als "adjusted" markierten Variablen im Modell haben.
ggdag_adjustment_set(full_dag,
exposure = "BK",
outcome = "KN",
shadow = TRUE) +
theme_dag()+
ggtitle("Adjustment Sets für den Effekt von BK auf KN")
# Definition des DAGs
full_dag <- dagify(
BK ~ RQCMM,
LS ~ BK,
SYM ~ BK,
FS ~ BK,
KN ~ LS + SYM + FS,
ZG ~ KN
)
# Plotten des Dags
ggdag(full_dag, node_size = 23) +
theme_dag()
# Plotten aller möglichen kausalen Wege von "from" nach "to"
ggdag_paths(full_dag,
from = "BK",
to = "KN",
shadow = TRUE) +
theme_dag()+
ggtitle("Adjustment Sets für den Effekt von BK auf KN")
# Definition des DAGs
full_dag <- dagify(
BK ~ RQCMM,
LS ~ BK,
SYM ~ BK,
FS ~ BK,
KN ~ LS + SYM + FS + BK,
ZG ~ KN
)
# Plotten aller möglichen kausalen Wege von "from" nach "to"
ggdag_paths(full_dag,
from = "BK",
to = "KN",
shadow = TRUE) +
theme_dag()+
ggtitle("Adjustment Sets für den Effekt von BK auf KN")
# Plotten der möglichen adjustment sets, also der Sets an Variablen die
# man kontrollieren muss um bias zu vermeiden für den effekt von "exposure"
# auf "outcome"
# Man muss alle als "adjusted" markierten Variablen im Modell haben.
ggdag_adjustment_set(full_dag,
exposure = "BK",
outcome = "KN",
shadow = TRUE) +
theme_dag()+
ggtitle("Adjustment Sets für den Effekt von BK auf KN")
install.packages(c("backports", "bookdown", "ellipsis", "foghorn", "gargle", "ggraph", "git2r", "glue", "haven", "HDInterval", "languageserver", "modelr", "pillar", "pkgbuild", "ps", "RcppArmadillo", "RcppParallel", "rematch2", "rlang", "rversions", "scales", "sp", "tidygraph", "tidyr", "tidyselect", "tinytex", "vctrs", "xfun", "zoo"))
install.packages(c("backports", "bookdown", "ellipsis", "foghorn", "gargle", "ggraph", "git2r", "glue", "haven", "HDInterval", "languageserver", "modelr", "pillar", "pkgbuild", "ps", "RcppArmadillo", "RcppParallel", "rematch2", "rlang", "rversions", "scales", "sp", "tidygraph", "tidyr", "tidyselect", "tinytex", "vctrs", "xfun", "zoo"))
install.packages(c("bayesplot", "brms", "dbplyr", "dplyr", "ggplot2", "httpuv", "pkgload", "StanHeaders", "V8"))
remove.packages("rstan")
remove.packages("StanHeaders")
if (file.exists(".RData")) file.remove(".RData")
Sys.setenv(MAKEFLAGS = "-j8")
remotes::install_github("stan-dev/rstan", ref = "develop", subdir = "rstan/rstan", build_opts = "")
knit_with_parameters('~/Documents/linespots/linespots-analysis/Paper/Report/RQ2_analysis_report.Rmd')
unlink('Documents/linespots/linespots-analysis/Paper/Report/RQ2_analysis_report_cache', recursive = TRUE)
unlink('Documents/linespots/linespots-analysis/Paper/Report/RQ2_analysis_report_cache', recursive = TRUE)
plot(dens(rgamma(1000, 0.1, 0.01)))
plot(density(rgamma(1000, 0.1, 0.01)))
plot(density(rgamma(1000, 0.01, 0.01)))
plot(density(rgamma(1000, 0.01, 0.01)))
plot(density(rgamma(1000, 0.01, 0.01)))
plot(density(rgamma(1000, 0.1, 0.01)))
plot(density(rgamma(1000, 0.01, 0.01)))
warnings()
library(loo)       # For comparing different models' performance
library(tidyverse) # For transforming and visualizing data.
library(ggridges)
library(gridExtra) # Combining many plots into the same figure.
library(brms)      # BDA packages. Alternatively, one can use rethinking & rstanarm.
library(bayesplot) # Plotting BDA output by Gabry et al.
library(ggthemes)  # Themes for ggplot
library(patchwork)
ggplot2::theme_set(theme_tufte(base_size = 30))
bayesplot::color_scheme_set("gray") #Uses the viridis palette on bayesplots.
library(ggdag)
library(projpred)
library(extraDistr)
library(ggforce)
################################################################################
# DAG
Runtime_dag <- dagify(
P ~ L,
LOC ~ P,
FC ~ P,
EM ~ A + P + LOC + FC + L,
exposure = "A",
outcome = "EM"
)
impliedConditionalIndependencies(Runtime_dag)
dagitty::impliedConditionalIndependencies(Runtime_dag)
dagitty::adjustmentSets(Runtime_dag)
library(loo)       # For comparing different models' performance
library(tidyverse) # For transforming and visualizing data.
library(ggridges)
library(gridExtra) # Combining many plots into the same figure.
library(brms)      # BDA packages. Alternatively, one can use rethinking & rstanarm.
library(bayesplot) # Plotting BDA output by Gabry et al.
library(ggthemes)  # Themes for ggplot
library(patchwork)
ggplot2::theme_set(theme_tufte(base_size = 30))
bayesplot::color_scheme_set("gray") #Uses the viridis palette on bayesplots.
library(ggdag)
library(projpred)
library(extraDistr)
library(ggforce)
SAMPLES = 5000
WARMUP = 1000
CHAINS = 4
SEED = 2020
DELTA = 0.99
TREE = 13
set.seed(SEED)
options(mc.cores = parallel::detectCores())
setwd("~/Documents/linespots/linespots-analysis/Paper/data/")
load(file = "plot-models.RData")
d = read_delim(
'full_evaluation.csv',
delim = ",",
locale = locale(decimal_mark = "."),
col_names = TRUE,
col_types = cols(
AUCEC1 = col_double(),
AUCEC100 = col_double(),
AUCEC20 = col_double(),
AUCEC5 = col_double(),
AUROC = col_double(),
Algorithm = col_factor(),
Depth = col_double(),
EInspect10 = col_double(),
EInspect100 = col_double(),
EInspect200 = col_double(),
EInspect50 = col_double(),
EInspectF = col_double(),
EXAM = col_double(),
FixCount = col_double(),
Future = col_double(),
LOC = col_double(),
Origin = col_double(),
Project = col_factor(),
Runtime = col_double(),
Time = col_factor(),
Weight = col_factor(),
comit_version = col_factor(),
commits = col_double(),
language = col_factor(),
url = col_factor()
)
)
d = subset(d, d$FixCount != 0)
d$EInspectF = ceiling(d$EInspectF * d$LOC)
d$LOC = scale(d$LOC)
d$FixCount = scale(d$FixCount)
d$Quality <- ifelse(d$comit_version == "None", "Base", "Good")
################################################################################
# Commit Convention Comparison
tmp = subset(d, d$Quality=="Good")
tmp$comit_version = "Good"
tmp = rbind(d, tmp)
levels(tmp$comit_version) = c(levels(tmp$comit_version), "Base")
tmp$comit_version[tmp$comit_version == "None"]  = "Base"
tmp$comit_version <- factor(tmp$comit_version, levels = c("Base",
"Good",
"conventional",
"discourse",
"angular"))
a = ggplot(tmp, aes(x=comit_version, y=EXAM)) +
geom_boxplot() +
scale_x_discrete(labels = c("Base" = "base",
"Good" = "good",
"conventional" = "conventional",
"discourse" = "discourse",
"angular" = "angular"
)) +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))
b = ggplot(tmp, aes(x = EXAM, y = comit_version)) +
geom_density_ridges() +
theme(axis.title.y = element_blank(),
axis.title.x = element_blank()) +
scale_y_discrete(labels = c("Base" = "base",
"Good" = "good",
"conventional" = "conventional",
"discourse" = "discourse",
"angular" = "angular"
))
a + b
a = ggplot(tmp, aes(x=comit_version, y=EXAM)) +
geom_boxplot() +
scale_x_discrete(labels = c("Base" = "base",
"Good" = "good",
"conventional" = "conventional",
"discourse" = "discourse",
"angular" = "angular"
)) +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = -45, hjust = 1))
a + b
a = ggplot(tmp, aes(x=comit_version, y=EXAM)) +
geom_boxplot() +
scale_x_discrete(labels = c("Base" = "base",
"Good" = "good",
"conventional" = "conventional",
"discourse" = "discourse",
"angular" = "angular"
)) +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = -45))
a + b
a = ggplot(tmp, aes(x=comit_version, y=EXAM)) +
geom_boxplot() +
scale_x_discrete(labels = c("Base" = "base",
"Good" = "good",
"conventional" = "conventional",
"discourse" = "discourse",
"angular" = "angular"
)) +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))
a + b
a = ggplot(tmp, aes(x=comit_version, y=EXAM)) +
geom_boxplot() +
scale_x_discrete(labels = c("Base" = "base",
"Good" = "good",
"conventional" = "conventional",
"discourse" = "discourse",
"angular" = "angular"
)) +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 315))
a + b
a = ggplot(tmp, aes(x=comit_version, y=EXAM)) +
geom_boxplot() +
scale_x_discrete(labels = c("Base" = "base",
"Good" = "good",
"conventional" = "conventional",
"discourse" = "discourse",
"angular" = "angular"
)) +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 315, vjust = 1))
a + b
a = ggplot(tmp, aes(x=comit_version, y=EXAM)) +
geom_boxplot() +
scale_x_discrete(labels = c("Base" = "base",
"Good" = "good",
"conventional" = "conventional",
"discourse" = "discourse",
"angular" = "angular"
)) +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 315, vjust = 2))
a + b
a = ggplot(tmp, aes(x=comit_version, y=EXAM)) +
geom_boxplot() +
scale_x_discrete(labels = c("Base" = "base",
"Good" = "good",
"conventional" = "conventional",
"discourse" = "discourse",
"angular" = "angular"
)) +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 315, vjust = -2))
a + b
a = ggplot(tmp, aes(x=comit_version, y=EXAM)) +
geom_boxplot() +
scale_x_discrete(labels = c("Base" = "base",
"Good" = "good",
"conventional" = "conventional",
"discourse" = "discourse",
"angular" = "angular"
)) +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 315, hjust = 1))
a + b
a = ggplot(tmp, aes(x=comit_version, y=EXAM)) +
geom_boxplot() +
scale_x_discrete(labels = c("Base" = "base",
"Good" = "good",
"conventional" = "conventional",
"discourse" = "discourse",
"angular" = "angular"
)) +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 315, hjust = -1))
a + b
a = ggplot(tmp, aes(x=comit_version, y=EXAM)) +
geom_boxplot() +
scale_x_discrete(labels = c("Base" = "base",
"Good" = "good",
"conventional" = "conventional",
"discourse" = "discourse",
"angular" = "angular"
)) +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))
a + b
pdf("threat-dens-1.pdf", width = 7, height = 3.5)
a
dev.off()
e = ggplot(tmp, aes(x=comit_version, y=EInspectF)) +
geom_boxplot() +
scale_y_continuous(trans='log10', breaks = c(1, 10, 100, 1000, 10000, 100000), labels = c("1", "10", "100", "1k", "10k", "100k")) +
theme(axis.title.x = element_blank()) +
scale_x_discrete(labels = c("Base" = "b",
"Good" = "g",
"conventional" = "c",
"discourse" = "d",
"angular" = "a"
))
f = ggplot(tmp, aes(x = EInspectF, y = comit_version)) +
geom_density_ridges() +
scale_x_continuous(trans='log10', breaks = c(1, 10, 100, 1000, 10000, 100000), labels = c("1", "10", "100", "1k", "10k", "100k")) +
theme(axis.title.y = element_blank(),
axis.title.x = element_blank()) +
scale_y_discrete(labels = c("Base" = "base",
"Good" = "good",
"conventional" = "conventional",
"discourse" = "discourse",
"angular" = "angular"))
e + f
mexam3= brm(
formula = EXAM ~ 1 + Algorithm + LOC + FixCount + (1 | Project) + (Algorithm | comit_version),
data = d,
family = Beta(),
prior = c(
prior(normal(-1, 1), class=Intercept),
prior(normal(0, 0.15), class=b),
prior(weibull(2, 1), class=sd),
prior(normal(50, 20), class=phi)
),
iter = SAMPLES,
warmup = WARMUP,
chains = CHAINS,
cores = parallel::detectCores(),
sample_prior = FALSE,
control = list(adapt_delta = DELTA, max_treedepth = TREE),
seed = SEED
)
a = mcmc_areas(mexam3, pars = c( "r_comit_version[None,AlgorithmBugspots]",
#"r_comit_version[Good,AlgorithmBugspots]",
"r_comit_version[conventional,AlgorithmBugspots]",
"r_comit_version[discourse,AlgorithmBugspots]",
"r_comit_version[angular,AlgorithmBugspots]"
),
prob = 0.95) +
scale_y_discrete(labels=c("r_comit_version[None,AlgorithmBugspots]" = "none",
#"r_comit_version[Good,AlgorithmBugspots]" = "Good",
"r_comit_version[conventional,AlgorithmBugspots]" = "conventional",
"r_comit_version[discourse,AlgorithmBugspots]" = "discourse",
"r_comit_version[angular,AlgorithmBugspots]" = "angular"
))
b = plot(conditional_effects(mexam4, effects = "comit_version",
conditions = data.frame("Algorithm" = c("Bugspots", "Linespots"))),
plot = FALSE)[[1]] +
scale_x_discrete(labels = c("None" = "base",
#"Good" = "good",
"conventional" = "conventional",
"discourse" = "discourse",
"angular" = "angular")) +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))
pdf("comit-versions-1.pdf", width=7, height = 3.5)
b
dev.off()
mexam4= brm(
formula = EXAM ~ 1 + Algorithm + LOC + FixCount + (1 | Project) + comit_version,
data = d,
family = Beta(),
prior = c(
prior(normal(-1, 1), class=Intercept),
prior(normal(0, 0.15), class=b),
prior(weibull(2, 1), class=sd),
prior(normal(50, 20), class=phi)
),
iter = SAMPLES,
warmup = WARMUP,
chains = CHAINS,
cores = parallel::detectCores(),
sample_prior = FALSE,
control = list(adapt_delta = DELTA, max_treedepth = TREE),
seed = SEED
)
b = plot(conditional_effects(mexam4, effects = "comit_version",
conditions = data.frame("Algorithm" = c("Bugspots", "Linespots"))),
plot = FALSE)[[1]] +
scale_x_discrete(labels = c("None" = "base",
#"Good" = "good",
"conventional" = "conventional",
"discourse" = "discourse",
"angular" = "angular")) +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))
b
pdf("comit-versions-1.pdf", width=7, height = 3.5)
b
dev.off()
b = plot(conditional_effects(mexam4, effects = "comit_version",
conditions = data.frame("Algorithm" = c("Bugspots", "Linespots"))),
plot = FALSE)[[1]] +
scale_x_discrete(labels = c("None" = "base",
#"Good" = "good",
"conventional" = "conventional",
"discourse" = "discourse",
"angular" = "angular")) +
scale_y_continuous(breaks = 5)+
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))
b
b = plot(conditional_effects(mexam4, effects = "comit_version",
conditions = data.frame("Algorithm" = c("Bugspots", "Linespots"))),
plot = FALSE)[[1]] +
scale_x_discrete(labels = c("None" = "base",
#"Good" = "good",
"conventional" = "conventional",
"discourse" = "discourse",
"angular" = "angular")) +
scale_y_continuous(breaks = c(0.175, 0.225, 0.275)) +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))
b
pdf("comit-versions-1.pdf", width=7, height = 3.5)
b
dev.off()
a
pdf("comit-versions-1.pdf", width=7, height = 4.5)
b
dev.off()
pdf("comit-versions-2.pdf", width = 7, height = 4.5)
a
dev.off()
a = ggplot(tmp, aes(x=comit_version, y=EXAM)) +
geom_boxplot() +
scale_x_discrete(labels = c("Base" = "base",
"Good" = "good",
"conventional" = "conventional",
"discourse" = "discourse",
"angular" = "angular"
)) +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))
b = ggplot(tmp, aes(x = EXAM, y = comit_version)) +
geom_density_ridges() +
theme(axis.title.y = element_blank(),
axis.title.x = element_blank()) +
scale_y_discrete(labels = c("Base" = "base",
"Good" = "good",
"conventional" = "conventional",
"discourse" = "discourse",
"angular" = "angular"
))
a + b
pdf("threat-dens-1.pdf", width = 7, height = 4.5)
a
dev.off()
pdf("threat-dens-2.pdf", width = 7, height = 4.5)
b
dev.off()
